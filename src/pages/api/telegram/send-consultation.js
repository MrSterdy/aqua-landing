export async function POST({ request }) {
  try {
    const data = await request.json()

    if (!data.name || !data.phone || !data.email) {
      return new Response(JSON.stringify({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      })
    }

    const TELEGRAM_BOT_TOKEN = import.meta.env.TELEGRAM_BOT_TOKEN
    const TELEGRAM_CHAT_ID = import.meta.env.TELEGRAM_CHAT_ID

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram')
      return new Response(JSON.stringify({ error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      })
    }

    const message = `üí¨ *–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é*

üë§ *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*
‚Ä¢ –ò–º—è: ${data.name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
‚Ä¢ Email: ${data.email}

üìã *–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:* –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —É—Å–ª—É–≥–∞–º
üìÖ –î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`

    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`

    const telegramResponse = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
      }),
    })

    if (!telegramResponse.ok) {
      const error = await telegramResponse.text()
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error)
      return new Response(JSON.stringify({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      })
    }

    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    })
  }
  catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
    return new Response(JSON.stringify({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
}
